class com.agnosticmedia.tools.Timecode {		var delimiter:String = ":"; // default delimiter	/**	 * constructor 	 */	function Timecode() {			}	/**	* del	The new delimiter	*/	public function setDelimiter(del:String):Void {		this.delimiter = del;	}	/**	* Convert milliseconds into hh:mm:ss.ff for a specific number of milliseconds.	*	* seconds	The seconds to be converted into hh:mm:ss:ff	*/	public function getTimecode(seconds:Number, framerate:Number):String {		//trace(framerate);		var tc = convertTime(seconds, framerate);		//var t:Number = Math.round(milliseconds);		/*		var t:Number = seconds;		var min:Number = Math.floor(t/60);		var sec:Number = t%60;		var tc:String = new String("");		if(min < 10) {			tc += "0";		}		if(min >= 1) {			tc += min.toString();		}		else {			tc += "0";		}		tc += this.delimiter;		if(sec < 10) {			tc += "0";			tc += sec.toString();		}		else {			tc += sec.toString();		}		*/			return tc;	}		public function convertTime(second:Number, framerate:Number) {	    // :: Convert Time//	trace("------------------");		var t = second * 1000;		//trace("Milliseconds "+ t);		var d = new Date(t);		//trace("Hours " + d.getUTCHours());	//	trace("Mins " + d.getUTCMinutes());	//	trace("Secs " + d.getUTCSeconds());	//	trace("milli " + d.getUTCMilliseconds());		var Hour = d.getUTCHours();		var Min = d.getUTCMinutes();		var Sec = d.getUTCSeconds();		var remMSec = d.getUTCMilliseconds();		var MilliSec = Math.floor(convertMillisecondsToFrames(remMSec, framerate));	    // :: Configure for Output	    Min = (Min < 10 ? "0" : "") + Min;	    Sec = (Sec < 10 ? "0" : "") + Sec;		Hour = (Hour < 10 ? "0" : "") + Hour;	    //MilliSec = substring(Millisec, 1, 2);	    MilliSec = (MilliSec < 10 ? "0" : "") + MilliSec;	    // :: Return	    //return Min+":"+Sec+"."+MilliSec;		return (Hour+":"+Min+":"+Sec+"."+ MilliSec);			}		/** 	 * Convert Time format to timecode	 *	 * milliseconds				The milliseconds of video	 * frameRate				The video framerate	 */	public function convertMillisecondsToFrames(milliseconds:Number, frameRate:Number):Number {		return (milliseconds * frameRate) / 1000;	}				}